const board = document.getElementById('board');
const winningMessage = document.getElementById('winning-message');
const winningText = document.querySelector('.winning-text');
const startButton = document.getElementById('start-btn');
const playWithComputerButton = document.getElementById('play-with-computer-btn');
const restartButton = document.getElementById('restart-btn');
const playAgainButton = document.getElementById('play-again-btn');
const score1Element = document.getElementById('score-1');
const score2Element = document.getElementById('score-2');
const turnInfo = document.getElementById('turn-info');
const player1NameInput = document.getElementById('player1Name');
const player2NameInput = document.getElementById('player2Name');
const avatarSelectors = document.querySelectorAll('.avatar-selector');
const avatarOptions = document.querySelectorAll('.avatar-options');
const thinkingIndicator = document.getElementById('thinking-indicator');

// T·∫°o b·∫£ng 10x10
for (let i = 0; i < 100; i++) {
    const cell = document.createElement('div');
    cell.classList.add('cell');
    cell.setAttribute('data-index', i);
    board.appendChild(cell);
}

const cells = document.querySelectorAll('.cell');

let scores = {
    player1: 0,
    player2: 0
};

let isPlayer1Turn = true;
let gameActive = false;
let lastWinner = null;
let isComputerMode = false;
let lastHumanMove = null;
let isFirstGame = true; // Th√™m bi·∫øn ƒë·ªÉ theo d√µi tr·∫≠n ƒë·∫ßu ti√™n

// M·∫£ng c√°c l·ªùi ch√∫c m·ª´ng
const congratMessages = [
    "üéâ Xu·∫•t s·∫Øc! B·∫°n ƒë√£ chi·∫øn th·∫Øng m·ªôt c√°ch ƒë·∫ßy thuy·∫øt ph·ª•c!",
    "üåü Wow! ƒê√∫ng l√† b·∫≠c th·∫ßy c·ªù ca-r√¥!",
    "üèÜ Chi·∫øn th·∫Øng tuy·ªát v·ªùi! ƒê·ªëi th·ªß kh√¥ng c√≥ c·ª≠a!",
    "üëë Qu√° ƒë·ªânh! X·ª©ng ƒë√°ng l√† nh√† v√¥ ƒë·ªãch!",
    "üéÆ Game hay qu√°! Th·∫Øng ƒë·∫πp nh∆∞ phim!",
    "‚≠ê ƒê·∫≥ng c·∫•p! Kh√¥ng ai c·∫£n ƒë∆∞·ª£c b·∫°n!",
    "üéØ Ch√≠nh x√°c t·ª´ng n∆∞·ªõc ƒëi! Qu√° xu·∫•t s·∫Øc!",
    "üåà Tuy·ªát v·ªùi √¥ng m·∫∑t tr·ªùi! Th·∫Øng qu√° x·ª©ng ƒë√°ng!",
    "üí´ Si√™u sao c·ªù ca-r√¥ ƒë√¢y r·ªìi!",
    "üî• Qu√° hot! ƒê·ªëi th·ªß ph·∫£i ch√†o thua!"
];

// H√†m l·∫•y ng·∫´u nhi√™n l·ªùi ch√∫c m·ª´ng
function getRandomCongratMessage() {
    const randomIndex = Math.floor(Math.random() * congratMessages.length);
    return congratMessages[randomIndex];
}

// X·ª≠ l√Ω click v√†o avatar ƒë·ªÉ ƒë·ªïi
avatarSelectors.forEach(selector => {
    selector.addEventListener('click', (e) => {
        const options = selector.querySelector('.avatar-options');
        options.classList.toggle('show');
        
        // ƒê√≥ng avatar options khi click ra ngo√†i
        const closeHandler = (event) => {
            if (!event.target.closest('.avatar-selector')) {
                options.classList.remove('show');
                document.removeEventListener('click', closeHandler);
            }
        };
        
        setTimeout(() => {
            document.addEventListener('click', closeHandler);
        }, 0);
    });
});

avatarOptions.forEach(options => {
    options.querySelectorAll('i').forEach(icon => {
        icon.addEventListener('click', (e) => {
            e.stopPropagation(); // NgƒÉn s·ª± ki·ªán click lan t·ªèa
            const avatar = e.target.dataset.avatar;
            const currentAvatar = options.closest('.avatar-selector').querySelector('.current-avatar');
            currentAvatar.className = `current-avatar fa-solid ${avatar} fa-6x`;
            options.classList.remove('show');
        });
    });
});

// T·∫°o m·∫£ng c√°c combination chi·∫øn th·∫Øng cho b·∫£ng 10x10
const WINNING_COMBINATIONS = [];

// Th√™m c√°c h√†ng
for (let i = 0; i < 10; i++) {
    const row = [];
    for (let j = 0; j < 6; j++) {
        row.push([i * 10 + j, i * 10 + j + 1, i * 10 + j + 2, i * 10 + j + 3, i * 10 + j + 4]);
    }
    WINNING_COMBINATIONS.push(...row);
}

// Th√™m c√°c c·ªôt
for (let i = 0; i < 10; i++) {
    const col = [];
    for (let j = 0; j < 6; j++) {
        col.push([i + j * 10, i + (j + 1) * 10, i + (j + 2) * 10, i + (j + 3) * 10, i + (j + 4) * 10]);
    }
    WINNING_COMBINATIONS.push(...col);
}

// Th√™m c√°c ƒë∆∞·ªùng ch√©o
for (let i = 0; i < 6; i++) {
    for (let j = 0; j < 6; j++) {
        // ƒê∆∞·ªùng ch√©o t·ª´ tr√°i sang ph·∫£i
        if (j + 4 < 10 && i + 4 < 10) {
            WINNING_COMBINATIONS.push([
                i * 10 + j,
                (i + 1) * 10 + (j + 1),
                (i + 2) * 10 + (j + 2),
                (i + 3) * 10 + (j + 3),
                (i + 4) * 10 + (j + 4)
            ]);
        }
        // ƒê∆∞·ªùng ch√©o t·ª´ ph·∫£i sang tr√°i
        if (j + 4 < 10 && i + 4 < 10) {
            WINNING_COMBINATIONS.push([
                i * 10 + (j + 4),
                (i + 1) * 10 + (j + 3),
                (i + 2) * 10 + (j + 2),
                (i + 3) * 10 + (j + 1),
                (i + 4) * 10 + j
            ]);
        }
    }
}

function getPlayerName(playerNumber) {
    const input = playerNumber === 1 ? player1NameInput : player2NameInput;
    return input.value.trim() || `Ng∆∞·ªùi ch∆°i ${playerNumber}`;
}

function updateTurnInfo() {
    const currentPlayerName = isPlayer1Turn ? getPlayerName(1) : getPlayerName(2);
    const symbol = isPlayer1Turn ? 'X' : 'O';
    turnInfo.textContent = `L∆∞·ª£t c·ªßa ${currentPlayerName} (${symbol})`;
    
    // C·∫≠p nh·∫≠t class current-turn v√† hi·ªáu ·ª©ng l·∫Øc l∆∞
    const player1Element = document.querySelector('.player-1');
    const player2Element = document.querySelector('.player-2');
    const player1Avatar = player1Element.querySelector('.current-avatar');
    const player2Avatar = player2Element.querySelector('.current-avatar');
    
    if (isPlayer1Turn) {
        player1Element.classList.add('current-turn');
        player2Element.classList.remove('current-turn');
        player1Avatar.classList.add('active');
        player2Avatar.classList.remove('active');
    } else {
        player1Element.classList.remove('current-turn');
        player2Element.classList.add('current-turn');
        player1Avatar.classList.remove('active');
        player2Avatar.classList.add('active');
    }
}

function activatePlayerAvatar(playerNumber) {
    const player1Avatar = document.querySelector('.player-1 .current-avatar');
    const player2Avatar = document.querySelector('.player-2 .current-avatar');
    
    player1Avatar.classList.remove('active');
    player2Avatar.classList.remove('active');
    
    if (playerNumber === 1) {
        player1Avatar.classList.add('active');
    } else if (playerNumber === 2) {
        player2Avatar.classList.add('active');
    }
    
    // X√≥a animation sau 2 gi√¢y
    setTimeout(() => {
        player1Avatar.classList.remove('active');
        player2Avatar.classList.remove('active');
    }, 15000);
}

function startGame(withComputer = false) {
    // X√≥a hi·ªáu ·ª©ng chi·∫øn th·∫Øng n·∫øu c√≥
    cells.forEach(cell => {
        cell.classList.remove('winning');
        cell.innerHTML = '';  // X√≥a c·∫£ icon n·∫øu c√≥
        cell.classList.remove('x', 'o');
        cell.textContent = '';
    });
    winningMessage.classList.remove('show');

    // D·ª´ng hi·ªáu ·ª©ng nh·∫Øc nh·ªü c·ªßa c√°c n√∫t
    startButton.classList.remove('remind');
    playWithComputerButton.classList.remove('remind');

    // Thi·∫øt l·∫≠p ch·∫ø ƒë·ªô ch∆°i
    isComputerMode = withComputer;
    
    // Thi·∫øt l·∫≠p t√™n v√† avatar cho m√°y n·∫øu c·∫ßn
    if (withComputer) {
        player1NameInput.value = "M√°y";
        player1NameInput.disabled = true;
        document.querySelector('.player-1 .current-avatar').className = 'current-avatar fa-solid fa-robot fa-6x';
        document.querySelector('.player-1 .avatar-selector').style.pointerEvents = 'none';
    } else {
        player1NameInput.value = "M√©o";
        player1NameInput.disabled = false;
        document.querySelector('.player-1 .current-avatar').className = 'current-avatar fa-solid fa-cat fa-6x';
        document.querySelector('.player-1 .avatar-selector').style.pointerEvents = 'auto';
    }

    // Ki·ªÉm tra xem ng∆∞·ªùi ch∆°i ƒë√£ nh·∫≠p t√™n ch∆∞a
    if (!player2NameInput.value.trim()) {
        alert('Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi ch∆°i!');
        return;
    }

    // X√°c ƒë·ªãnh ng∆∞·ªùi ƒëi tr∆∞·ªõc
    if (isFirstGame) {
        // Tr·∫≠n ƒë·∫ßu ti√™n, m√°y lu√¥n ƒëi tr∆∞·ªõc trong ch·∫ø ƒë·ªô ch∆°i v·ªõi m√°y
        isPlayer1Turn = withComputer;  // true n·∫øu l√† m√°y, false n·∫øu l√† ng∆∞·ªùi ch∆°i
    } else {
        // T·ª´ tr·∫≠n th·ª© 2, ng∆∞·ªùi th·∫Øng ƒë∆∞·ª£c ƒëi tr∆∞·ªõc
        if (lastWinner === 'player1') {
            isPlayer1Turn = true; // M√°y th·∫Øng, m√°y ƒëi tr∆∞·ªõc
        } else if (lastWinner === 'player2') {
            isPlayer1Turn = false; // Ng∆∞·ªùi ch∆°i th·∫Øng, ng∆∞·ªùi ch∆°i ƒëi tr∆∞·ªõc
        } else {
            // N·∫øu h√≤a, ng∆∞·ªùi ch∆°i 1 ƒëi tr∆∞·ªõc
            isPlayer1Turn = true;
        }
    }

    // Reset l·∫°i tr·∫°ng th√°i game
    lastHumanMove = null;
    gameActive = true;
    
    // Th√™m l·∫°i s·ª± ki·ªán click cho c√°c √¥
    cells.forEach(cell => {
        cell.removeEventListener('click', handleClick);
        cell.addEventListener('click', handleClick, { once: true });
    });

    // C·∫≠p nh·∫≠t giao di·ªán
    updateTurnInfo();
    startButton.style.display = 'none';
    playWithComputerButton.style.display = 'none';
    restartButton.style.display = 'block';

    // N·∫øu ch∆°i v·ªõi m√°y v√† ƒë·∫øn l∆∞·ª£t m√°y, cho m√°y ƒë√°nh
    if (withComputer && isPlayer1Turn) {
        setTimeout(computerPlay, isFirstGame ? 0 : 500);
    }
}

function handleClick(e) {
    if (!gameActive) {
        if (startButton.style.display !== 'none') {
            startButton.classList.add('remind');
            playWithComputerButton.classList.add('remind');
        }
        return;
    }
    
    // Trong ch·∫ø ƒë·ªô ch∆°i v·ªõi m√°y, ch·ªâ cho ph√©p ng∆∞·ªùi ch∆°i ƒë√°nh khi ƒë·∫øn l∆∞·ª£t (O)
    if (isComputerMode && isPlayer1Turn) return;
    
    const cell = e.target;
    if (cell.classList.contains('x') || cell.classList.contains('o')) return;
    
    handleCellClick(cell);
}

function handleCellClick(cell) {
    const currentClass = isPlayer1Turn ? 'x' : 'o';
    placeMark(cell, currentClass);
    
    if (checkWin(currentClass)) {
        endGame(false);
    } else if (isDraw()) {
        endGame(true);
    } else {
        swapTurns();
        updateTurnInfo();
        
        // L∆∞u n∆∞·ªõc ƒëi c·ªßa ng∆∞·ªùi ch∆°i
        if (isComputerMode && !isPlayer1Turn) {
            lastHumanMove = cell;
        }
        
        // N·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô ch∆°i v·ªõi m√°y v√† ƒë·∫øn l∆∞·ª£t m√°y, cho m√°y ƒë√°nh
        if (isComputerMode && isPlayer1Turn) {
            computerPlay();
        }
    }
}

function placeMark(cell, currentClass) {
    cell.classList.add(currentClass);
    // Ch·ªâ hi·ªÉn th·ªã X/O khi ch∆∞a th·∫Øng
    if (!cell.classList.contains('winning')) {
        cell.textContent = currentClass.toUpperCase();
    }
}

function swapTurns() {
    isPlayer1Turn = !isPlayer1Turn;
}

function checkWin(currentClass) {
    let hasWon = false;
    let winningCombination = null;

    // Ki·ªÉm tra h√†ng ngang
    for (let row = 0; row < 10; row++) {
        for (let col = 0; col <= 5; col++) {
            let win = true;
            for (let i = 0; i < 5; i++) {
                if (!cells[row * 10 + col + i].classList.contains(currentClass)) {
                    win = false;
                    break;
                }
            }
            if (win) {
                hasWon = true;
                winningCombination = Array.from({length: 5}, (_, i) => row * 10 + col + i);
                break;
            }
        }
        if (hasWon) break;
    }

    // Ki·ªÉm tra h√†ng d·ªçc
    if (!hasWon) {
        for (let col = 0; col < 10; col++) {
            for (let row = 0; row <= 5; row++) {
                let win = true;
                for (let i = 0; i < 5; i++) {
                    if (!cells[(row + i) * 10 + col].classList.contains(currentClass)) {
                        win = false;
                        break;
                    }
                }
                if (win) {
                    hasWon = true;
                    winningCombination = Array.from({length: 5}, (_, i) => (row + i) * 10 + col);
                    break;
                }
            }
            if (hasWon) break;
        }
    }

    // Ki·ªÉm tra ƒë∆∞·ªùng ch√©o xu·ªëng ph·∫£i
    if (!hasWon) {
        for (let row = 0; row <= 5; row++) {
            for (let col = 0; col <= 5; col++) {
                let win = true;
                for (let i = 0; i < 5; i++) {
                    if (!cells[(row + i) * 10 + col + i].classList.contains(currentClass)) {
                        win = false;
                        break;
                    }
                }
                if (win) {
                    hasWon = true;
                    winningCombination = Array.from({length: 5}, (_, i) => (row + i) * 10 + col + i);
                    break;
                }
            }
            if (hasWon) break;
        }
    }

    // Ki·ªÉm tra ƒë∆∞·ªùng ch√©o xu·ªëng tr√°i
    if (!hasWon) {
        for (let row = 0; row <= 5; row++) {
            for (let col = 4; col < 10; col++) {
                let win = true;
                for (let i = 0; i < 5; i++) {
                    if (!cells[(row + i) * 10 + col - i].classList.contains(currentClass)) {
                        win = false;
                        break;
                    }
                }
                if (win) {
                    hasWon = true;
                    winningCombination = Array.from({length: 5}, (_, i) => (row + i) * 10 + col - i);
                    break;
                }
            }
            if (hasWon) break;
        }
    }

    if (hasWon && winningCombination) {
        // Thay th·∫ø X/O b·∫±ng m·∫∑t c∆∞·ªùi tr√™n c√°c √¥ th·∫Øng
        winningCombination.forEach(index => {
            const cell = cells[index];
            cell.classList.add('winning');
            cell.innerHTML = '<i class="fa-solid fa-face-laugh-wink"></i>';
        });
    }

    return hasWon;
}

function isDraw() {
    return [...cells].every(cell => {
        return cell.classList.contains('x') || cell.classList.contains('o');
    });
}

// T·∫°o hi·ªáu ·ª©ng confetti
function createConfetti() {
    const colors = ['#ff6b6b', '#4d96ff', '#ffd868'];
    confetti({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 },
        colors: colors,
        disableForReducedMotion: true
    });
}

// T·∫°o hi·ªáu ·ª©ng confetti 3 l·∫ßn
function playConfettiEffect() {
    createConfetti();
    setTimeout(createConfetti, 500);
    setTimeout(createConfetti, 1000);
}

function endGame(draw) {
    gameActive = false;
    
    if (draw) {
        winningText.innerText = 'H√≤a r·ªìi! ü§ù';
        lastWinner = null;
        winningMessage.classList.add('show');
    } else {
        const winner = isPlayer1Turn ? getPlayerName(1) : getPlayerName(2);
        const winnerAvatar = isPlayer1Turn ? 
            document.querySelector('.player-1 .current-avatar').className.split(' ')[2] :
            document.querySelector('.player-2 .current-avatar').className.split(' ')[2];
        const congratMessage = getRandomCongratMessage();
            
        // Ph√°t hi·ªáu ·ª©ng confetti khi th·∫Øng
        playConfettiEffect();
            
        // ƒê·ª£i 3 gi√¢y tr∆∞·ªõc khi hi·ªÉn th·ªã th√¥ng b√°o chi·∫øn th·∫Øng
        setTimeout(() => {
            winningText.innerHTML = `
                <i class="fa-solid ${winnerAvatar} fa-2x"></i><br>
                ${winner} ƒë√£ chi·∫øn th·∫Øng!<br>
                ${congratMessage}
            `;
            winningMessage.classList.add('show');
            
            // Update scores v√† l∆∞u ng∆∞·ªùi th·∫Øng
            if (isPlayer1Turn) {
                scores.player1++;
                score1Element.textContent = scores.player1;
                lastWinner = 'player1'; // M√°y th·∫Øng
            } else {
                scores.player2++;
                score2Element.textContent = scores.player2;
                lastWinner = 'player2'; // Ng∆∞·ªùi ch∆°i th·∫Øng
            }
        }, 3000);
    }
}

function restartGame() {
    startButton.style.display = 'block';
    playWithComputerButton.style.display = 'block';
    restartButton.style.display = 'none';
    gameActive = false;
    isFirstGame = true; // Reset l·∫°i tr·∫≠n ƒë·∫ßu ti√™n
    
    // Reset l·∫°i tr·∫°ng th√°i c·ªßa player 1 n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô m√°y
    if (isComputerMode) {
        player1NameInput.disabled = false;
        document.querySelector('.player-1 .avatar-selector').style.pointerEvents = 'auto';
    }
}

function playAgain() {
    isFirstGame = false; // ƒê√°nh d·∫•u kh√¥ng ph·∫£i tr·∫≠n ƒë·∫ßu ti√™n
    startGame(isComputerMode); // S·ª≠ d·ª•ng tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa isComputerMode
}

// Th√™m s·ª± ki·ªán cho c√°c n√∫t
startButton.addEventListener('click', () => startGame(false));
playWithComputerButton.addEventListener('click', () => startGame(true));
restartButton.addEventListener('click', restartGame);
playAgainButton.addEventListener('click', playAgain);

// Th√™m s·ª± ki·ªán cho input name
player1NameInput.addEventListener('input', updateTurnInfo);
player2NameInput.addEventListener('input', updateTurnInfo);

// H√†m ki·ªÉm tra xem c√≥ 4 qu√¢n li√™n ti·∫øp kh√¥ng
function checkFourInARow(currentClass) {
    // Ki·ªÉm tra h√†ng ngang
    for (let row = 0; row < 10; row++) {
        for (let col = 0; col <= 5; col++) {
            let count = 0;
            let emptyCell = null;
            for (let i = 0; i < 5; i++) {
                const index = row * 10 + col + i;
                if (index >= 100) continue; // B·ªè qua n·∫øu index v∆∞·ª£t qu√° b·∫£ng
                const cell = cells[index];
                if (!cell) continue; // B·ªè qua n·∫øu cell kh√¥ng t·ªìn t·∫°i
                if (cell.classList.contains(currentClass)) {
                    count++;
                } else if (!cell.classList.contains('x') && !cell.classList.contains('o')) {
                    emptyCell = cell;
                }
            }
            if (count === 4 && emptyCell) {
                return emptyCell;
            }
        }
    }

    // Ki·ªÉm tra h√†ng d·ªçc
    for (let col = 0; col < 10; col++) {
        for (let row = 0; row <= 5; row++) {
            let count = 0;
            let emptyCell = null;
            for (let i = 0; i < 5; i++) {
                const index = (row + i) * 10 + col;
                if (index >= 100) continue; // B·ªè qua n·∫øu index v∆∞·ª£t qu√° b·∫£ng
                const cell = cells[index];
                if (!cell) continue; // B·ªè qua n·∫øu cell kh√¥ng t·ªìn t·∫°i
                if (cell.classList.contains(currentClass)) {
                    count++;
                } else if (!cell.classList.contains('x') && !cell.classList.contains('o')) {
                    emptyCell = cell;
                }
            }
            if (count === 4 && emptyCell) {
                return emptyCell;
            }
        }
    }

    // Ki·ªÉm tra ƒë∆∞·ªùng ch√©o xu·ªëng ph·∫£i
    for (let row = 0; row <= 5; row++) {
        for (let col = 0; col <= 5; col++) {
            let count = 0;
            let emptyCell = null;
            for (let i = 0; i < 5; i++) {
                const index = (row + i) * 10 + col + i;
                if (index >= 100) continue; // B·ªè qua n·∫øu index v∆∞·ª£t qu√° b·∫£ng
                const cell = cells[index];
                if (!cell) continue; // B·ªè qua n·∫øu cell kh√¥ng t·ªìn t·∫°i
                if (cell.classList.contains(currentClass)) {
                    count++;
                } else if (!cell.classList.contains('x') && !cell.classList.contains('o')) {
                    emptyCell = cell;
                }
            }
            if (count === 4 && emptyCell) {
                return emptyCell;
            }
        }
    }

    // Ki·ªÉm tra ƒë∆∞·ªùng ch√©o xu·ªëng tr√°i
    for (let row = 0; row <= 5; row++) {
        for (let col = 4; col < 10; col++) {
            let count = 0;
            let emptyCell = null;
            for (let i = 0; i < 5; i++) {
                const index = (row + i) * 10 + col - i;
                if (index >= 100) continue; // B·ªè qua n·∫øu index v∆∞·ª£t qu√° b·∫£ng
                const cell = cells[index];
                if (!cell) continue; // B·ªè qua n·∫øu cell kh√¥ng t·ªìn t·∫°i
                if (cell.classList.contains(currentClass)) {
                    count++;
                } else if (!cell.classList.contains('x') && !cell.classList.contains('o')) {
                    emptyCell = cell;
                }
            }
            if (count === 4 && emptyCell) {
                return emptyCell;
            }
        }
    }

    return null;
}

// H√†m l·∫•y c√°c √¥ tr·ªëng xung quanh m·ªôt √¥
function getAdjacentEmptyCells(cellIndex) {
    const row = Math.floor(cellIndex / 10);
    const col = cellIndex % 10;
    const emptyCells = [];

    for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
            const newRow = row + i;
            const newCol = col + j;
            if (newRow >= 0 && newRow < 10 && newCol >= 0 && newCol < 10) {
                const index = newRow * 10 + newCol;
                const cell = cells[index];
                if (!cell.classList.contains('x') && !cell.classList.contains('o')) {
                    emptyCells.push(cell);
                }
            }
        }
    }

    return emptyCells;
}

// H√†m l·∫•y m·ªôt √¥ ng·∫´u nhi√™n t·ª´ danh s√°ch
function getRandomCell(cellList) {
    return cellList[Math.floor(Math.random() * cellList.length)];
}

// H√†m l·∫•y t·∫•t c·∫£ c√°c √¥ tr·ªëng
function getAllEmptyCells() {
    return [...cells].filter(cell => 
        !cell.classList.contains('x') && !cell.classList.contains('o')
    );
}

// H√†m l·∫•y c√°c √¥ trung t√¢m c√≤n tr·ªëng
function getCenterCells() {
    const centerCells = [];
    // L·∫•y 9 √¥ ·ªü gi·ªØa b·∫£ng (t·ª´ h√†ng 4-6, c·ªôt 4-6)
    for (let row = 4; row <= 6; row++) {
        for (let col = 4; col <= 6; col++) {
            const index = row * 10 + col;
            const cell = cells[index];
            if (!cell.classList.contains('x') && !cell.classList.contains('o')) {
                centerCells.push(cell);
            }
        }
    }
    return centerCells;
}

// H√†m hi·ªÉn th·ªã thinking indicator
function showThinkingIndicator() {
    thinkingIndicator.classList.add('show');
}

// H√†m ·∫©n thinking indicator
function hideThinkingIndicator() {
    thinkingIndicator.classList.remove('show');
}

// H√†m l·∫•y th·ªùi gian suy nghƒ© ng·∫´u nhi√™n (2, 4, 6, 8 gi√¢y)
function getRandomThinkingTime() {
    const times = [500, 1000, 1500, 2000, 2500, 3000];
    return times[Math.floor(Math.random() * times.length)];
}

// H√†m ƒë√°nh gi√° ƒëi·ªÉm cho m·ªôt v·ªã tr√≠
function evaluatePosition(index, currentClass) {
    const row = Math.floor(index / 10);
    const col = index % 10;
    let score = 0;

    // Ki·ªÉm tra 8 h∆∞·ªõng
    const directions = [
        [-1, -1], [-1, 0], [-1, 1], // Tr√™n tr√°i, tr√™n, tr√™n ph·∫£i
        [0, -1], [0, 1],           // Tr√°i, ph·∫£i
        [1, -1], [1, 0], [1, 1]    // D∆∞·ªõi tr√°i, d∆∞·ªõi, d∆∞·ªõi ph·∫£i
    ];

    for (const [dx, dy] of directions) {
        let count = 0;
        let blocked = 0;
        let space = 0;

        // Ki·ªÉm tra 4 √¥ li√™n ti·∫øp theo m·ªói h∆∞·ªõng
        for (let step = 1; step <= 4; step++) {
            const newRow = row + dx * step;
            const newCol = col + dy * step;
            
            if (newRow < 0 || newRow >= 10 || newCol < 0 || newCol >= 10) {
                blocked++;
                break;
            }

            const cell = cells[newRow * 10 + newCol];
            if (cell.classList.contains(currentClass)) {
                count++;
            } else if (!cell.classList.contains('x') && !cell.classList.contains('o')) {
                space++;
            } else {
                blocked++;
                break;
            }
        }

        // T√≠nh ƒëi·ªÉm d·ª±a tr√™n s·ªë qu√¢n li√™n ti·∫øp v√† kh√¥ng gian
        if (count === 3 && space === 1 && blocked === 0) score += 1000;  // C∆° h·ªôi th·∫Øng
        else if (count === 2 && space === 2 && blocked === 0) score += 100;  // Ti·ªÅm nƒÉng t·ªët
        else if (count === 1 && space === 3 && blocked === 0) score += 10;   // Ti·ªÅm nƒÉng trung b√¨nh
    }

    // Th√™m ƒëi·ªÉm cho v·ªã tr√≠ chi·∫øn l∆∞·ª£c
    if ((row === 4 || row === 5) && (col === 4 || col === 5)) score += 5;  // Trung t√¢m
    if (row >= 2 && row <= 7 && col >= 2 && col <= 7) score += 2;          // Khu v·ª±c gi·ªØa

    return score;
}

// H√†m t√¨m n∆∞·ªõc ƒëi t·ªët nh·∫•t cho m√°y
function findBestMove() {
    const emptyCells = getAllEmptyCells();
    let bestScore = -1;
    let bestCell = null;

    // Ki·ªÉm tra n∆∞·ªõc th·∫Øng ngay
    const winningMove = checkFourInARow('x');
    if (winningMove) return winningMove;

    // Ki·ªÉm tra n∆∞·ªõc ch·∫∑n th·∫Øng c·ªßa ƒë·ªëi th·ªß
    const blockingMove = checkFourInARow('o');
    if (blockingMove) return blockingMove;

    // ƒê√°nh gi√° t·∫•t c·∫£ c√°c √¥ tr·ªëng
    for (const cell of emptyCells) {
        const index = parseInt(cell.dataset.index);
        
        // T√≠nh ƒëi·ªÉm t·∫•n c√¥ng (cho X)
        let attackScore = evaluatePosition(index, 'x');
        
        // T√≠nh ƒëi·ªÉm ph√≤ng th·ªß (cho O)
        let defenseScore = evaluatePosition(index, 'o');
        
        // K·∫øt h·ª£p ƒëi·ªÉm v·ªõi tr·ªçng s·ªë
        let totalScore = attackScore * 1.2 + defenseScore;

        // C·∫≠p nh·∫≠t n∆∞·ªõc ƒëi t·ªët nh·∫•t
        if (totalScore > bestScore) {
            bestScore = totalScore;
            bestCell = cell;
        }
    }

    // N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c n∆∞·ªõc ƒëi t·ªët, ch·ªçn ng·∫´u nhi√™n t·ª´ c√°c √¥ trung t√¢m
    if (!bestCell || bestScore === 0) {
        const centerCells = getCenterCells();
        if (centerCells.length > 0) {
            return getRandomCell(centerCells);
        }
        return getRandomCell(emptyCells);
    }

    return bestCell;
}

// C·∫≠p nh·∫≠t h√†m computerPlay
function computerPlay() {
    if (!gameActive || !isComputerMode || !isPlayer1Turn) return;

    // Ki·ªÉm tra xem c√≥ ph·∫£i l∆∞·ª£t ƒë·∫ßu ti√™n kh√¥ng
    const emptyCells = getAllEmptyCells();
    const isFirstMove = emptyCells.length === 100;

    if (!isFirstMove) {
        showThinkingIndicator();
    }

    setTimeout(() => {
        if (!isFirstMove) {
            hideThinkingIndicator();
        }

        let cellToPlay;

        // N·∫øu l√† n∆∞·ªõc ƒëi ƒë·∫ßu ti√™n, ch·ªçn m·ªôt √¥ ·ªü gi·ªØa
        if (isFirstMove) {
            const centerCells = getCenterCells();
            cellToPlay = getRandomCell(centerCells);
        } else {
            // S·ª≠ d·ª•ng thu·∫≠t to√°n m·ªõi ƒë·ªÉ t√¨m n∆∞·ªõc ƒëi t·ªët nh·∫•t
            cellToPlay = findBestMove();
        }

        if (cellToPlay) {
            handleCellClick(cellToPlay);
        }
    }, isFirstMove ? 0 : getRandomThinkingTime());
} 